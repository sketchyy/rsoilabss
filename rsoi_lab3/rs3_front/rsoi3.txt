На наработках 2ой лабораторной разделив и добавив функционал, сделать следующее:
#1. Два (или более беканда) каждый отвечает за свои данные (например: бекенд работы с книгами, беканд работы с авторами)
#2. Один бекенд - сессия.
#3. Один фронтенд - агрегация информаций из бекенда
#4. (опционально) Cлой логики, берущий на себя часть работы фронтенда (работу с сессией и запросы к более низким уровням бекендов)

Все это различные приложения.
Все приложения (кроме фрнотенда) имеют REST API
Желательный формат сообщений взаимодействия - JSON
Можно сделать одну базу данных на все бекенды (но работать в разных таблицах)

Простенький GUI на html (не переусердствуйте)
Для бекендов реализовать не только просмотр но и добавление, удаление, обновление контента.
Примерная схема отображена на картинке.

Приложение должно уметь из фронтенда делать запросы на каждый из бекендов #1 по отдельности (например, просмотреть список книг, просмотреть список авторов), так и осуществлять 2 запроса и агрегировать информацию (например, просмотреть расширенный список книг с указанием в информации о книге расширенную информаци об авторах)

Часть ресурсов должна быть защищенная, часть нет (например, Вы можете просмотреть общий список книг, но так же должен функционал отобранных книг для этого пользователя)

Не забывайте про авторизацию.

----------------------------------------------------------------------------------------------------













так, вашему вниманию представляется распаршенное задание по рсои-3!
1) OAuth тут нет. он не нужен, надо про него забыть.
2) суть - сделать сайтик

1) мужик приходит на сайтик. ему отвечает фронт.
2) мужик вводит логинпароль. фронт кидает их сессии. сессия проверяет их и генерит мужику куки с ключом. отдаёт их фронту, фронт отдаёт их мужику.
3) теперь мужик приходит на сайтик уже с куками (уже были или только что авторизовался). У него есть на сайтике кнопочек. Кнопочек умеют в постучать на логику, чтобы дать данных.
4) логика, когда по ней постукивает мужик кнопочкой, кричит на сессию и показывает ей куки. 
если сессии норм, то она так и говорит, и логика кричит бекендам, чтобы принесли. 
если сессии не норм, то она так и говорит, и логика кричит на мужика, что она его не знает, и шиш ему а не данных.
5) беки можно делать глупыми. они ничего не проверяют и верят, что кроме логики никто на них не стукнет, а потому верить можно.

итого:
фронт - сайтик с логикой
сессия - рест приложенька, умеет в авторизацию
логика - рест приложенька, умеет в какое то апи
бекенд1, бекенд2 - рест приложеньки, умеют сделать то, что им скажет логика

Сергей Коробков18.12.14
Доп требования к 3 лабе - 
1) оптимальные запросы к нескольким бекендам (просить только книжки существующих авторов)
2) возвращать не жсон, а хтмл таблички с данными
3) на ВСЕ функции бекендов нужна кнопка в интерфейсе
4) рест функционал - get post put delete
5) Логирование запросов всех серверов - эндпойнт, гет/ пост параметры, куки если не лень

Константин Ершов18.12.14
6) при join запросе не вызывать много раз один и тот же метод любого из беков

Константин Ершов21.12.14
Кстати про 3 лабу по рсои, с куками на прямую самому работать необязательно. Можно юзать что то встроенное. Он у меня это проверял и я показывал код - все ок